# ---------------------------------- NodeConfig
# id of the node
#node.id=

# the consensus protocol that will be used for the node. valid options are 'bizur' or 'raft' (without single quotes)
#node.consensus.protocol=

# the number of threads used when a node wants to broadcast a message to its peers. It is advised to at least 
# set this value equaling the number of peers so that at least a single thread is guaranteed to be allocated
# when sending a command to a peer.
# Default = 0, i.e. (processor count * 2). If set to -1, there's no limit in the number of threads used.
#node.peerExecutor.threadCount=0

# ---------------------------------- RaftConfig (extends NodeConfig)
# the initial election timeout for the node. This value will be modified internally based on node's id.
#raft.electionTimeoutMs=1000

# the interval that the node keeps checking for raft state machine internally and sends heartbeat messages.
#raft.updateIntervalMs=500

# the consistency level/guarantee configured for the protocol. Strong consistency guarantee ensures that all the
# reads see the most recent writes (consistency favored over availability during network partitions, i.e. CP system),
# otherwise, availability is favored over data consistency where clients might read previous versions of values
# (AP system).
# Possible values are:
# - strong (default): for CP system setup
# - weak: for AP system setup
# NB! It is strongly recommended to change this value only for demo purposes as weak consistency has not been
# covered with tests.
#raft.consistency=strong

# ---------------------------------- BizurConfig (extends NodeConfig)
# total number of peers to be used in the bizur alg (including the node itself). If this value is greater
# than 0 (default), then this value is used. Otherwise, the size of the value returned by
# Transport.getDestinationNodeIds() method is used. Transport.getDestinationNodeIds() method returns a proper value
# based on the Transport configuration (see TcpTransportConfig).
#bizur.numPeers=0

# total number of buckets to be used in the bizur alg. If a value greater than 0 is set, then this value is used.
# Otherwise, the number of buckets are Integer.MAX_VALUE (default). Keep in mind that if the default value is used,
# then the iterateKeys api will have significant performance overhead since it will iterate over all the buckets.
# However, read and write performance drastically increase. So it depends on the use case to set this value to
# something other than the default.
#bizur.numBuckets=0

# the interval that the node keeps checking for raft state machine internally and sends heartbeat messages.
#bizur.updateIntervalMs=500

# ---------------------------------- SimConfig (extends NodeConfig)
# id of the node to use as leader. (default=0)
#simulate.leaderId=0

# If set to true, the follower will forward the received message to leader. (default=true)
#simulate.follower.forwardToLeader=true

# If set to true, the leader will broadcast the received message to followers. (default=true)
#simulate.leader.broadcastToFollowers=true

# ---------------------------------- TransportConfig
# timeout for waiting a response per message.
#transport.message.callbackTimeoutMs=5000

# ---------------------------------- TcpTransportConfig (extends TransportConfig)
# pool size for clients assigned for each node.
# - if value equals 0 (zero), then clientPoolSize=(processor count * 2)
# - if value is less than 0, then clientPoolSize=unlimited. It is advisable to use this value since bizur nodes may
#   reach a deadlock state if not enough number of clients are present.
#transport.tcp.clientPoolSize=-1

# destinations for the tcp transport.
#transport.tcp.destinations=

# port to bind for the tcp server transport.
#transport.tcp.server.port=

# socket read timeout in milliseconds. If you want to enable the timeout, set this value to something greater than zero.
# Default is 0 (disabled).
# The reason why this works is that nodes send heartbeat messages to each other in regular intervals, so the
# sockets created are expecting to receive these messages before reaching the timeout.
#transport.tcp.server.socket.so_timeout=0

# The count of failures/timeouts when trying to connect or communicate with a server to mark it as unstable.
# For all servers that are marked unstable, the client is disallowed from sending messages. The overhead
# of creating a tcp socket connection and trying to send a message that is bound to fail is aimed to be eliminated
# this way. As soon as the failure detector understands that the unstable server is back online, the client may
# continue sending messages.
#transport.tcp.client.failure.markServerAsFailedCount=3

# The interval (in milliseconds) to ping a server which was marked as unstable/failed. The failure detector is
# responsible for pinging all the servers that are marked unstable.
#transport.tcp.client.failure.pingInterval=5000

# ---------------------------------- MetricsConfig
# Metrics are being exported as graphite compatible data. A custom file sender has been implemented for this purpose.

# Enable/disable project insight metrics collection. Disabled by default.
#metrics.insights.enabled=false

# Enable/disable jvm metrics collection. Disabled by default.
#metrics.jvm.enabled=false

# enable/disable supported jvm metrics.
#metrics.jvm.classloader.enabled=true
#metrics.jvm.memory.enabled=true
#metrics.jvm.gc.enabled=true
#metrics.jvm.processor.enabled=true
#metrics.jvm.thread.enabled=true

# specify the full path of the file to write the metrics.
#metrics.exportfile=/tmp/metrics.txt

# specify the separator (blank space by default) for each metric row. To support csv formatted data, comma (,)
# can be supplied as the value of this property.
#metrics.separator=

# specify prefix for the collected metrics.
#metrics.prefix=

# step interval to collect metrics (milliseconds), cannot be less than 1000.
#metrics.step=2000